# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_api.ipynb.

# %% auto 0
__all__ = ['Box21Api']

# %% ../01_api.ipynb 5
import requests

class Box21Api:
    "Box21 Api class"
    def __init__(self, email:str, password:str, host:str, port:int, project_id:int):
        self.email = email
        self.password = password
        self.host = host
        self.port = port
        self.project_id = project_id
        self.token = self.get_token()
        
    def post(self, url, payload):
        self.token = self.get_token()
        session = requests.Session()
        session.headers.update({'x-access-token': self.token})
        response = session.post(self.host + ':' + str(self.port) + url, data=payload)
        return response
    
    def get(self, url, payload=None):
        self.token = self.get_token()
        session = requests.Session()
        session.headers.update({'x-access-token': self.token})
        response = session.get(self.host + ':' + str(self.port) + url, data=payload)
        return response
        
    def get_token(self):
        session = requests.Session()

        # Get token
        payload = {
            "email": self.email, "password": self.password}

        response = session.post(self.host + ':' + str(self.port) + '/api/login', data=payload)
        token = response.json().get('token')
        return token

# %% ../01_api.ipynb 8
from .asset import Asset

class Box21Api(Box21Api):
    def get_assets(self, offset:int=0, limit:int=None) -> [Asset]:
        payload = {
            "offset": offset,
            "limit": limit,
            "project_id": self.project_id
        }
        url = '/api/v2/assets'
        response = self.get(url, payload)
        asset_jsons = response.json()

        return [Asset.from_json(asset_json) for asset_json in asset_jsons]

# %% ../01_api.ipynb 10
from PIL import Image
import io

class Box21Api(Box21Api):
    def download_asset(self, asset_id: int) -> Image:
        self.token = self.get_token()
        url = '/api/asset/download'
        payload = {
            "asset_id": asset_id,
            "project_id": self.project_id
        }
        response = self.post(url, payload)

        return Image.open(io.BytesIO(response.content))

# %% ../01_api.ipynb 14
from PIL import Image
import io, json
from .annotation import Annotation, BoundingBox, Keypoint

class Box21Api(Box21Api):
    def get_annotations(self, asset_id: int) -> [Annotation]:
        self.token = self.get_token()
        url = '/api/asset/annotations'
        payload = {
            "asset_id": asset_id,
        }
        response = self.post(url, payload)
        
        annotations = []
        
        for annotation_json in response.json():
            
            asset_id = annotation_json['asset_id']
            annotation_id = annotation_json['id']
            certainty = annotation_json['certainty']
            label_id = annotation_json['label_id']
            label_name = annotation_json['relationships']['label']['name']
            project_id = annotation_json['project_id']
            validated = annotation_json['validated']
            coords = json.loads(annotation_json['coords'])
            
            if annotation_json['type'] == 1:
                x, y, w, h = coords
                annotations.append(
                    BoundingBox(asset_id, annotation_id, certainty, label_id, label_name, project_id, validated, x, y, w, h))
            else:
                x, y = coords
                annotations.append(
                    Keypoint(asset_id, annotation_id, certainty, label_id, label_name, project_id, validated, x, y))
                

        return annotations
