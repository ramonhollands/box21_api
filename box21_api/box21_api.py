"""Interact with your Box21"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_api.ipynb.

# %% auto 0
__all__ = ['Box21Api']

# %% ../01_api.ipynb 4
from fastcore.utils import * # type: ignore

# %% ../01_api.ipynb 5
from typing import Any
import requests

class Box21Api:
    "Box21 Api class"
    def __init__(self, email:str, password:str, host:str, port:int, project_id:int):
        self.email = email
        self.password = password
        self.host = host
        self.port = port
        self.project_id = project_id
        self.token = self.get_token()
        
    def post(self, url :str , payload : Dict[str,Any], files : Optional[Dict[str, str]] = None):
        self.token = self.get_token()
        session = requests.Session()
        session.headers.update({'x-access-token': self.token})
        if files:
            response = session.post(self.host + ':' + str(self.port) + url, data=payload, files=files)
        else:
            response = session.post(self.host + ':' + str(self.port) + url, data=payload)
        return response
    
    def get(self, url : str, payload : Optional[Dict[str,str]]=None):
        self.token = self.get_token()
        session = requests.Session()
        session.headers.update({'x-access-token': self.token})
        response = session.get(self.host + ':' + str(self.port) + url, data=payload)
        return response
        
    def get_token(self):
        session = requests.Session()

        # Get token
        payload = {
            "email": self.email, "password": self.password}

        response = session.post(self.host + ':' + str(self.port) + '/api/login', data=payload)
        token = response.json().get('token')
        return token

# %% ../01_api.ipynb 8
from .asset import Asset

@patch
def get_assets(self:Box21Api, offset:int=0, limit: Optional[int]=None) -> List[Asset]:

    print(self.project_id)
    payload : Dict[str, str] = {
        "offset": str(offset),
        "limit": limit, # type: ignore
        "project_id": str(self.project_id)
    }
    url = '/api/v2/assets'
    response = self.post(url, payload)
    
    asset_jsons = response.json()
    

    return [Asset.from_json(asset_json) for asset_json in asset_jsons]

@patch
def get_asset(self:Box21Api, asset_id: int) -> Asset:
    url = '/api/asset'
    response = self.post(url, {'asset_id': asset_id})
    asset_json = response.json()    
    return Asset.from_json(asset_json)

# %% ../01_api.ipynb 11
from PIL import Image
import io

@patch
def download_asset(self:Box21Api, asset_id: int) -> Image.Image:
    self.token = self.get_token()
    url = '/api/asset/download'
    payload = {
        "asset_id": asset_id,
        "project_id": self.project_id
    }
    response = self.post(url, payload)

    return Image.open(io.BytesIO(response.content))

# %% ../01_api.ipynb 15
import json
@patch
def get_assets_with_filters(self:Box21Api, filters: List[Dict[str, str]]) -> List[Asset]:
    api_endpoint = '/api/filter-assets'
        
    form_params : Dict[str, Any] = {
        'filters': json.dumps(filters),
        'project_id': self.project_id,
        'offset': 0,
        'limit': 100
    }

    response = self.post(
        api_endpoint,
        form_params
    )
        
    response_data = response.json()
    items = response_data.get('items', [])
    asset_ids = [item['id'] for item in items]

    # Second request to get asset details
    api_endpoint = '/api/v2/assets'
    form_params = {
        'asset_ids': json.dumps(asset_ids),
        'project_id': self.project_id,
        'limit': len(asset_ids)
    }

    response = self.post(
        api_endpoint,
        form_params
    )

    return [Asset.from_json(asset_json) for asset_json in response.json()]

@patch
def get_assets_containing_meta(self:Box21Api, meta: List[str], in_validation_set:bool=False, validated:Optional[bool]=None) -> List[Asset]:
    filters : List[Dict[str, Any]] = []

    for m in meta:
        filters.append({"type":7,"value":m})

    if in_validation_set:
        filters.append({"type": 13, "value": 'Yes'})
    else:
        filters.append({"type": 13, "value": 'No'})   

    if validated is True:
        filters.append({"type": 9, "value": 'Yes'})
    elif validated is False:
        filters.append({"type": 9, "value": 'No'})
    
    return self.get_assets_with_filters(filters)

@patch
def get_assets_not_containing_meta(self:Box21Api, meta: List[str], in_validation_set:bool=False, validated:Optional[bool]=None) -> List[Asset]:
    filters : List[Dict[str, Any]] = []

    for m in meta:
        filters.append({"type":8,"value":m})

    if in_validation_set:
        filters.append({"type": 13, "value": 'Yes'})
    else:
        filters.append({"type": 13, "value": 'No'})   

    if validated is True:
        filters.append({"type": 9, "value": 'Yes'})
    elif validated is False:
        filters.append({"type": 9, "value": 'No'})
    
    return self.get_assets_with_filters(filters)

# %% ../01_api.ipynb 18
import json
from .annotation import Box21Annotation, Box21BoundingBox, Box21Keypoint
from .annotation import parse_json_annotation

@patch
def get_annotations(self:Box21Api, asset_id: int) -> List[Box21Annotation]:
    self.token = self.get_token()
    url = '/api/asset/annotations'
    payload = {
        "asset_id": asset_id,
    }
    response = self.post(url, payload)

    annotations : List[Box21Annotation] = []

    for annotation_json in response.json():
        annotations.append(parse_json_annotation(annotation_json))

    return annotations

# %% ../01_api.ipynb 23
@patch
def update_asset_meta(self:Box21Api, asset_id: int, key: str, value: str) -> [Box21Annotation]:
    self.token = self.get_token()
    url = '/api/asset/meta/update-value'
    payload = {
        "asset_id": asset_id,
        "key": key,
        "value": value
    }
    response = self.post(url, payload)

    return Asset.from_json(response.json())

@patch
def delete_asset_meta_key(self:Box21Api, asset_id: int, key: str) -> [Box21Annotation]:
    self.token = self.get_token()
    url = '/api/asset/meta/delete-key'
    payload = {
        "asset_id": asset_id,
        "key": key
    }
    response = self.post(url, payload)

    return Asset.from_json(response.json())

# %% ../01_api.ipynb 29
from .label import Box21Label
from typing import List
from .annotation_stat import AnnotationStat

@patch
def get_labels(self:Box21Api) -> List[Box21Label]:
    self.token = self.get_token()
    url = '/api/labels'
    payload = {
        "project_id": self.project_id
    }
    response = self.post(url, payload)

    labels : List[Box21Label] = []
    for label_json in response.json():
        annotation_stats : List[AnnotationStat] = []

        for annotation_stat_json in label_json['relationships']['annotation_stats']:
            annotation_stats.append(
                AnnotationStat.from_json(annotation_stat_json)
            )

        labels.append(
            Box21Label(
                id=label_json['id'],
                name=label_json['name'],
                parent_id=label_json['parent_id'],
                project_id=label_json['project_id'],
                type=label_json['type'],
                annotation_stats=annotation_stats
            ))

    return labels

# %% ../01_api.ipynb 32
@patch
def get_label_annotations(self:Box21Api, label: Box21Label) -> [Box21Annotation]:
    self.token = self.get_token()
    url = '/api/label/annotations'
    payload = {
        "label_id": label.id
    }
    response = self.post(url, payload)

    annotations = []

    for annotation_json in response.json():

        asset_id = annotation_json['asset_id']
        annotation_id = annotation_json['id']
        certainty = annotation_json['certainty']
        label_id = annotation_json['label_id']
        project_id = annotation_json['project_id']
        validated = annotation_json['validated']
        coords = json.loads(annotation_json['coords'])

        if annotation_json['type'] == 1:
            x, y, w, h = coords
            annotations.append(
                Box21BoundingBox(asset_id, annotation_id, certainty, label_id, project_id, validated, x, y, w, h))
        else:
            x, y = coords
            annotations.append(
                Box21Keypoint(asset_id, annotation_id, certainty, label_id, project_id, validated, x, y))
    return annotations

# %% ../01_api.ipynb 37
from pathlib import Path
from .annotation import Annotation
from .annotation import BoundingBox
from .annotation import Keypoint

@patch
def add_asset(self:Box21Api, file_path: Path, meta : Dict[str, Any], annotations: List[Annotation]= [], validated : bool =False, in_validation_set : bool=False, no_duplicate_filename : bool = False) -> List[Asset]:

    if not isinstance(meta, dict):
        return 'meta argument should be a python dictionary'

    bounding_boxes : List[BoundingBox] = []
    keypoints : List[Keypoint] = []
    for annotation in annotations:
        if isinstance(annotation, BoundingBox):
            if annotation.x > 1:
                return 'Incorrect coordinates, should be between 0 and 1'
            bounding_boxes.append({
                'normalized_xywh': [annotation.x, annotation.y, annotation.width, annotation.height],
                'label': annotation.label_name,
                'confidence': annotation.certainty
            })
        elif isinstance(annotation, Keypoint):
            if annotation.x > 1:
                return 'Incorrect coordinates, should be between 0 and 1'
            keypoints.append({
                'normalized_xywh': [annotation.x, annotation.y],
                'label': annotation.label_name,
                'confidence': annotation.certainty
            })


    self.token = self.get_token()
    url = '/api/assets/add'
    payload = {
        'meta': json.dumps(meta),
        'validated': validated,
        'in_validation_set': in_validation_set,
        'filename': file_path.name,
        'bounding_boxes': json.dumps(bounding_boxes),
        'keypoints': json.dumps(keypoints),
        'project_id': self.project_id,
        'no_duplicate_filename': no_duplicate_filename
    }
    files = {'file': open(file_path, 'rb')}
    response = self.post(url, payload, files=files)
    #print(response.text)

    return Asset.from_json(response.json())

@patch
def delete_assets(self:Box21Api, asset_ids: List[int]):
    url = '/api/assets/delete'
    payload = {
        'asset_ids': json.dumps(asset_ids)
    }
    response = self.post(url, payload)
    return response

# %% ../01_api.ipynb 46
from requests import Response

@patch
def add_annotation(self:Box21Api, annotation: Annotation, asset: Asset) -> Optional[Response]:
    # is BoundingBox type
    if type(annotation) == BoundingBox:
        url = '/api/assets/boundingbox/add'
        label_name = annotation.label_name
        normalized_xywh = [annotation.x, annotation.y, annotation.width, annotation.height]
        certainty = annotation.certainty
        payload : Dict[str,Any] = {
            'asset_id': asset.id,
            'label_name': label_name,
            'normalized_xywh': json.dumps(normalized_xywh),
            'certainty': certainty
        }

        print('payload', payload)
        return self.post(url, payload)

    elif type(annotation) == Keypoint:
        url = '/api/assets/keypoint/add'
        label_name = annotation.label_name
        normalized_xy = [annotation.x, annotation.y]
        certainty = annotation.certainty
        payload : Dict[str,Any] = {
            'asset_id': asset.id,
            'label_name': label_name,
            'normalized_xywh': json.dumps(normalized_xy),
            'certainty': certainty
        }
        return self.post(url, payload)

# %% ../01_api.ipynb 47
@patch
def detete_annotations(self:Box21Api, annotations: List[Box21Annotation]) -> None:
    url = '/api/annotation/delete'    
    for annotation in annotations:
        payload = {
            'annotation_id': annotation.id
        }
        self.post(url, payload)

# %% ../01_api.ipynb 50
@patch
def update_job(self:Box21Api, job_id : int, processing : Optional[bool] = None, processed : Optional[bool] = None, progress : Optional[int] = None):
    url = '/api/update-job'
    payload : Dict[str, Any] = {
        'job_id': job_id,
        'processing': processing,
        'processed': processed,
        'progress': progress
        
    }
    return self.post(url, payload)

# %% ../01_api.ipynb 52
from requests import Response

@patch
def delete_suggestions(self:Box21Api, asset_id: int) -> Response:
    url = '/api/asset/discard-all-suggestions'
    payload = {
        'asset_id': asset_id
    }
    return self.post(url, payload)

